question : 

Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.
For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.


solution :


import java.util.Scanner;

class Main {
  public static void main(String[] args) {
    System.out.println("Enter the number of elements :");
    int n,i,j,lowest=Integer.MAX_VALUE,secondlowest=Integer.MAX_VALUE,difference=Integer.MAX_VALUE,result,result1=Integer.MIN_VALUE;

    Scanner scan = new Scanner(System.in);

    boolean positivepresent = false;

    String result2 = "The smallest positive number missing is :";
    
    n = scan.nextInt();

    int[] a = new int[n];

    System.out.println("Enter the elements :");

    for(i=0;i<n;i++)
    a[i] = scan.nextInt();

    for(i=0;i<n;i++)
    {
      if(a[i]<0)
      a[i]=0;
      else
      {
        positivepresent = true;
        if(a[i]>result1)
        {
          result1 = a[i];
        }
      }
    }

    if(!positivepresent)
    result1 = 1;
    else
    result1+=1;

    i=0;j=a.length-1;

    while(i<j)
    {
      if(a[i]==0)
      i++;

      else if(a[j]==0)
      j--;

      else
      {
        if(a[i]<a[j])
        {
          if(a[j]-a[i] > 1)
          {
            result1 = a[i]+1;
          }

          if(lowest>a[i])
          lowest = a[i];

          if(secondlowest > a[j])
          secondlowest = a[j];

          j--;
        }

        else
        {
          if(a[i]-a[j] > 1)
          {
            result1 = a[j]+1;
          }

          if(lowest>a[j])
          lowest = a[j];

          if(secondlowest > a[i])
          secondlowest = a[i];

          i++;
        }
      }
    }

    if(lowest>1)
    result1 = 1;

    result2 = result2.concat(Integer.toString(result1));

    System.out.println(result2);

  }
}