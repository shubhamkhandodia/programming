class Solution 
{
    public int maxSubArray(int[] nums) 
    {
        if(nums.length<=1)
        {
            if(nums.length==1)
                return nums[0];
            else
                return 0;
        }
        
        int maxtillnow = nums[0],max = Integer.MIN_VALUE;
        
        for(int i=1;i<nums.length;i++)
        {
            maxtillnow = Math.max(nums[i],maxtillnow+nums[i]);
            
            if(maxtillnow>max)
                max = maxtillnow;
        }
        
        return max;
    }



    OR



    public int maxSubArray(int[] A) 
    {
        int n = A.length;\

        int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];

        dp[0] = A[0];
        int max = dp[0];
        
        for(int i = 1; i < n; i++)
        {
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0); (if the previous element is greater than 0 then add it to A[i])
            max = Math.max(max, dp[i]);
        }
        
        return max;
}
}