class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        vector<vector<int>> nums2;
        unordered_set <string> uniqueTriplets;
        string temp;
        
        int n = nums.size();
        
        std::sort(nums.begin(),nums.end());
        
        for(int i=0;i<n-2;i++)
        {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            
            int left = i+1;
            int right = n-1;
            int x = nums[i];
            
            while(left<right)
            {
                if(x+nums[left]+nums[right]==0)
                {
                     temp = to_string(nums[i]) + " : " + to_string(nums[left]) + " : "+ to_string(nums[right]);
                    
                     if(uniqueTriplets.find(temp) ==  uniqueTriplets.end())
                     {
                        uniqueTriplets.insert(temp);
                        
                        nums2.push_back(vector<int>{nums[i],nums[left],nums[right]});
                     }
                    
                    
                    left++;
                    right--;
                }
                
                else if(x+nums[left]+nums[right]<0)
                {
                    left++;
                }
                
                else
                    right--;
            }
            
        }
        
        return nums2;
    }
};